"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGlobalstate = exports.GlobalState = void 0;
var immer_1 = __importDefault(require("immer"));
var GlobalState = /** @class */ (function () {
    function GlobalState(initialValue) {
        this.value = initialValue;
        this.subscriptions = [];
        this.persist = false;
    }
    GlobalState.prototype.getValue = function (selector) {
        if (selector) {
            return selector(this.value);
        }
        return this.value;
    };
    GlobalState.prototype.refresh = function () {
        this.subscriptions.forEach(function (subscription) {
            if (subscription.reRender) {
                subscription.reRender();
            }
        });
    };
    GlobalState.prototype.updateValue = function (updater, config) {
        if (config === void 0) { config = {}; }
        var selector = config.selector;
        var patcher = config.patcher;
        var oldState = this.value;
        var newState;
        if (selector && patcher) {
            var nodeValue_1 = (0, immer_1.default)(selector(oldState), updater);
            newState = (0, immer_1.default)(oldState, function (draftCurrentState) {
                var val = patcher(draftCurrentState, nodeValue_1);
                if (val !== undefined) {
                    return val;
                }
            });
        }
        else {
            newState = (0, immer_1.default)(oldState, updater);
        }
        this.value = newState;
        if (newState !== oldState) {
            // There's a new update
            this.subscriptions.forEach(function (subscription) {
                if (subscription.selector(newState) !== subscription.selector(oldState)) {
                    // Node value has changed
                    subscription.observer(subscription.selector(newState));
                }
            });
        }
    };
    GlobalState.prototype.subscribe = function (itemToSubscribe) {
        var _this = this;
        var _itemToSubscribe;
        if (Object.prototype.toString.call(itemToSubscribe) === '[object Function]') {
            _itemToSubscribe = {
                observer: itemToSubscribe,
                selector: function (state) { return state; }
            };
        }
        else {
            _itemToSubscribe = itemToSubscribe;
        }
        if (this.subscriptions.indexOf(_itemToSubscribe) === -1) {
            // Subscribe a component to this global state
            this.subscriptions.push(_itemToSubscribe);
        }
        ;
        var unsubscribe = function () {
            _this.subscriptions = _this.subscriptions.filter(function (subscription) { return (subscription !== _itemToSubscribe); });
        };
        return unsubscribe;
    };
    return GlobalState;
}());
exports.GlobalState = GlobalState;
function createGlobalstate(initialValue) {
    return new GlobalState(initialValue);
}
exports.createGlobalstate = createGlobalstate;
