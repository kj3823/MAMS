import { GlobalState } from './GlobalState';
declare type Reducer = (state: any, action: any) => any;
declare type Observer = (key: string, value: any) => void;
declare type Config<T> = {
    default?: T;
    selector?: (state: any) => any;
    patcher?: (state: any, selectedStateValue: any) => any;
    persist?: boolean;
};
declare type PersistenceConfig = {
    saveState: (key: string, state: any, isInitialSet?: boolean) => void;
    loadState: (key: string) => any;
    removeState?: (key: string) => void;
    clearStorage?: () => void;
    PERSIST_ENTIRE_STORE?: boolean;
};
declare class PersistentStorage {
    SHOULD_PERSIST_BY_DEFAULT: boolean;
    loadState(key: string): any;
    saveState(key: string, state: any, isInitialSet?: boolean): void;
    removeState: (key: string) => void;
    clearStorage: () => void;
}
declare class Store {
    value: Map<string, GlobalState<any>>;
    subscriptions: Array<Observer>;
    persistentStorage: PersistentStorage;
    constructor();
    subscribe(observer: Observer): () => void;
    onStoreUpdate(key: string, value: any): void;
    persist(config: PersistenceConfig): void;
    setState<T>(key: string, initialValue: T, { persist }?: {
        persist?: boolean;
    }): void;
    getState<T>(key: string, config?: {
        default?: T;
        persist?: boolean;
    }): GlobalState<any>;
    clear(fn?: () => void): void;
    remove(globalStatekey: string | string[], fn?: () => void): void;
    useState<ST = any, T = any>(key: string, config?: Config<T>): [state: ST, setState: (state: any) => any, updateState: (updater: (currentState: any) => any) => any];
    useReducer<ST = any, T = any>(reducer: Reducer, key: string, config?: Config<T>): [state: ST, dispatch: (action: any) => any];
}
declare function createStore(): Store;
export { Store, createStore };
